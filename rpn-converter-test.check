#include "rpn-converter.h"

char rpn_result[100];

#tcase to_rpn

#test can_convert_addition
    ck_assert_int_eq(to_rpn("a+b", rpn_result), SUCCESS);

    ck_assert_str_eq(rpn_result, "ab+");

#test can_convert_subtraction
    ck_assert_int_eq(to_rpn("a-b", rpn_result), SUCCESS);

    ck_assert_str_eq(rpn_result, "ab-");

#test can_convert_multiplication
    ck_assert_int_eq(to_rpn("a*b", rpn_result), SUCCESS);

    ck_assert_str_eq(rpn_result, "ab*");

#test can_convert_division
    ck_assert_int_eq(to_rpn("a/b", rpn_result), SUCCESS);

    ck_assert_str_eq(rpn_result, "ab/");

#test can_convert_exponent
    ck_assert_int_eq(to_rpn("a^b", rpn_result), SUCCESS);

    ck_assert_str_eq(rpn_result, "ab^");

#test when_an_unsupported_operator_is_passed_it_returns_invalid_syntax_status
    ck_assert_int_eq(to_rpn("a&b", rpn_result), INVALID_SYNTAX);

    ck_assert_str_eq(rpn_result, "");

#test when_an_unsupported_operator_is_later_in_the_expression_it_returns_invalid_syntax_status
    ck_assert_int_eq(to_rpn("a+b|c", rpn_result), INVALID_SYNTAX);

    ck_assert_str_eq(rpn_result, "");

#test when_an_unsupported_operator_is_first_in_a_complex_expression_it_returns_invalid_syntax_status
    ck_assert_int_eq(to_rpn("a%b+c", rpn_result), INVALID_SYNTAX);

    ck_assert_str_eq(rpn_result, "");

#test can_convert_with_any_operands_that_are_lowercase_letters
    ck_assert_int_eq(to_rpn("a+z", rpn_result), SUCCESS);

    ck_assert_str_eq(rpn_result, "az+");

#test when_a_non_lowercase_letter_first_operand_is_passed_it_returns_invalid_syntax_status
    ck_assert_int_eq(to_rpn("`-z", rpn_result), INVALID_SYNTAX);

    ck_assert_str_eq(rpn_result, "");

#test when_a_non_lowercase_letter_last_operand_is_passed_it_returns_invalid_syntax_status
    ck_assert_int_eq(to_rpn("a+{", rpn_result), INVALID_SYNTAX);

    ck_assert_str_eq(rpn_result, "");

#test when_the_expression_does_not_have_an_operator_it_returns_invalid_syntax_status
    ck_assert_int_eq(to_rpn("ab", rpn_result), INVALID_SYNTAX);

    ck_assert_str_eq(rpn_result, "");

#test when_the_expression_has_multiple_adjacent_operators_it_returns_invalid_syntax_status
    ck_assert_int_eq(to_rpn("a++b", rpn_result), INVALID_SYNTAX);

    ck_assert_str_eq(rpn_result, "");

#test when_the_expression_has_multiple_adjacent_operands_it_returns_invalid_syntax_status
    ck_assert_int_eq(to_rpn("a+bc", rpn_result), INVALID_SYNTAX);

    ck_assert_str_eq(rpn_result, "");

#test can_convert_multiple_chained_operations_with_the_same_operator
    ck_assert_int_eq(to_rpn("a+b+c+d", rpn_result), SUCCESS);

    ck_assert_str_eq(rpn_result, "ab+c+d+");

#test can_convert_subtraction_then_addition
    ck_assert_int_eq(to_rpn("a-b+c", rpn_result), SUCCESS);

    ck_assert_str_eq(rpn_result, "ab-c+");

#test can_convert_subtraction_then_multiplication
    ck_assert_int_eq(to_rpn("a-b*c", rpn_result), SUCCESS);

    ck_assert_str_eq(rpn_result, "abc*-");

#test can_convert_addition_then_subtraction_then_multiplication
    ck_assert_int_eq(to_rpn("a+b-c*d", rpn_result), SUCCESS);

    ck_assert_str_eq(rpn_result, "abcd*-+");

#test can_convert_addition_then_subtraction_then_addition
    ck_assert_int_eq(to_rpn("a+b-c+d", rpn_result), SUCCESS);

    ck_assert_str_eq(rpn_result, "abc-+d+");

#test can_convert_division_then_multiplication_then_exponentiation
    ck_assert_int_eq(to_rpn("a/b*c^d", rpn_result), SUCCESS);

    ck_assert_str_eq(rpn_result, "ab/cd^*");

#test can_convert_multiplication_then_division_then_subtraction_then_exponentiation
    ck_assert_int_eq(to_rpn("b*c/d-e^f", rpn_result), SUCCESS);

    ck_assert_str_eq(rpn_result, "bcd/*ef^-");

#test can_convert_multiplication_then_subtraction_then_exponentiation_then_division
    ck_assert_int_eq(to_rpn("b*c-d^e/f", rpn_result), SUCCESS);

    ck_assert_str_eq(rpn_result, "bc*de^f/-");

#test can_convert_exponentiation_then_subtraction_then_addition_then_multiplication_then_division
    ck_assert_int_eq(to_rpn("c^d-e+f*g/h", rpn_result), SUCCESS);

    ck_assert_str_eq(rpn_result, "cd^e-fgh/*+");

#test can_convert_addition_in_parentheses_then_addition
    ck_assert_int_eq(to_rpn("(a+b)+c", rpn_result), SUCCESS);

    ck_assert_str_eq(rpn_result, "ab+c+");

#test can_convert_addition_then_addition_in_parentheses
    ck_assert_int_eq(to_rpn("a+(b+c)", rpn_result), SUCCESS);

    ck_assert_str_eq(rpn_result, "abc++");

#test can_convert_addition_then_addition_in_parentheses_then_addition_again
    ck_assert_int_eq(to_rpn("(a+b)+(c+d)", rpn_result), SUCCESS);

    ck_assert_str_eq(rpn_result, "ab+cd++");

#test can_convert_an_operation_wrapped_in_multiple_parentheses
    ck_assert_int_eq(to_rpn("(((a+b)))", rpn_result), SUCCESS);

    ck_assert_str_eq(rpn_result, "ab+");
